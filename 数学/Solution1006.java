package 数学;
//1006. 笨阶乘
//通常，正整数 n 的阶乘是所有小于或等于 n 的正整数的乘积。例如，factorial(10) = 10 * 9 * 8 * 7 * 6 * 5 * 4 * 3 * 2 * 1。
//
//相反，我们设计了一个笨阶乘 clumsy：在整数的递减序列中，我们以一个固定顺序的操作符序列来依次替换原有的乘法操作符：乘法(*)，除法(/)，加法(+)和减法(-)。
//
//例如，clumsy(10) = 10 * 9 / 8 + 7 - 6 * 5 / 4 + 3 - 2 * 1。然而，这些运算仍然使用通常的算术运算顺序：我们在任何加、减步骤之前执行所有的乘法和除法步骤，并且按从左到右处理乘法和除法步骤。
//
//另外，我们使用的除法是地板除法（floor division），所以 10 * 9 / 8 等于 11。这保证结果是一个整数。
//
//实现上面定义的笨函数：给定一个整数 N，它返回 N 的笨阶乘。
//
//
//
//示例 1：
//
//输入：4
//输出：7
//解释：7 = 4 * 3 / 2 + 1
//示例 2：
//
//输入：10
//输出：12
//解释：12 = 10 * 9 / 8 + 7 - 6 * 5 / 4 + 3 - 2 * 1
public class Solution1006 {
    //周期为4
    public int clumsy(int N) {
        if(N==1||N==2)
            return N;
        else if(N==3)
            return 6;           //数字3，2，1比较特殊，所以特判
        int sum = 0,answer = 0;
        int x = N/4;                    //对N整除得到有几个正周期
        int n = N%4;                    //对N取余得到有几个余下的项
        if(n == 1){
            sum = N - 4*x;
        }else {
            int sum1 = (N - 4 * x) * (N - 4 * x - 1);
            if(n == 2){
                sum = sum1;
            }else if (n == 3){
                sum = sum1 /(N - 4*x - 2);
            }
        }            //这个if 和 else 计算的是余下的那n项所计算出来的数字sum

        for(int i = N; i > n;i = i - 4){
            if(i == N){
                answer = (i) * (i - 1)/(i - 2)+(i-3);
            }else{
                answer -= ((i) * (i - 1)/(i - 2)-(i-3));
            }
        }                                //这个for循环计算的是整周期的数
        return answer - sum;
    }
}
